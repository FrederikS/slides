{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/spring-cloud-contract","matchPath":"/spring-cloud-contract/*","result":{"data":{"deck":{"id":"967ee8f0-ddf6-5900-bb68-5957b0b44c7b","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Notes = makeShortcode(\"Notes\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Spring Cloud Contract\"), mdx(\"hr\", null), mdx(\"h2\", null, \"What?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"facilitates contract testing approach\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"verifies integration between applications within your system\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"integration points between producer and consumer defined by contracts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"supports multiple DSLs for contract definitions (Groovy, Java, Kotlin, YAML)\")), mdx(\"hr\", null), mdx(\"h2\", null, \"How?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"generates HTTP/messaging stubs for client/consumer development, doing exactly\\nwhat the actual server/producer implementation does\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"generates boilerplate test code, used for verification of the server/producer\\nimplementation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"provides a way to publish changes in contracts, immediately visible in both\\nsides\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Why?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"very fast feedback\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"no infrastructure required\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"promotes ATDD (acceptance test-driven development) in a microservice-based\\nenvironment\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Manually created stubs\"), mdx(\"img\", {\n    src: testOk,\n    style: {\n      height: \"40vh\"\n    }\n  }), mdx(\"img\", {\n    src: realityFail,\n    style: {\n      height: \"40vh\",\n      marginBottom: \"1em\"\n    }\n  }), mdx(\"hr\", null), mdx(\"h1\", null, \"HTTP API Example\"), mdx(\"hr\", null), mdx(\"h1\", null, \"Producer-Side\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Could be on consumer-side\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Could be an external repository\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Producer Application\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"@SpringBootApplication\\npublic class ProducerApplication {\\n\\n  public static void main(String[] args) {\\n    SpringApplication.run(ProducerApplication.class);\\n  }\\n\\n  @Bean\\n  RouterFunction<ServerResponse> routes(BookHandler bookHandler) {\\n    return route()\\n            .POST(\\\"/books\\\", accept(APPLICATION_JSON), bookHandler::create)\\n            .build();\\n  }\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"public class PostBookRequest {\\n\\n  public final String title;\\n  public final String description;\\n\\n  public PostBookRequest(String title, String description) {\\n    this.title = title;\\n    this.description = description;\\n  }\\n\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Contracts\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"# src/test/resources/contracts/post-book-without-title.yml\\n\\nname: post-book-without-title\\ndescription: Adding a book without title should return 400\\nrequest:\\n  method: POST\\n  url: /books\\n  headers:\\n    Content-Type: application/json\\n  body:\\n    title:\\n    description: the book without title\\n  matchers:\\n    body:\\n      - path: $.title\\n        type: by_null\\nresponse:\\n  status: 400\\n\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"by convention put into src/test/resources/contracts, but configurable\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Configure Maven Plugin\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<!-- pom.xml -->\\n\\n<build>\\n  <plugins>\\n    <plugin>\\n      <groupId>org.springframework.cloud</groupId>\\n      <artifactId>spring-cloud-contract-maven-plugin</artifactId>\\n      <version>3.0.2</version>\\n      <extensions>true</extensions>\\n      <configuration>\\n          <testFramework>JUNIT5</testFramework>\\n          <testMode>WEBTESTCLIENT</testMode>\\n          <baseClassForTests>com.example.BaseProducerTest</baseClassForTests>\\n      </configuration>\\n    </plugin>\\n  </plugins>\\n</build>\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"generates producer tests\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"generates stubs for consumer\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Generated Producer Test\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"@SpringBootTest(webEnvironment = RANDOM_PORT)\\nclass BaseProducerTest {\\n\\n    @Autowired\\n    private ApplicationContext context;\\n\\n    @BeforeEach\\n    void setUp() {\\n        RestAssuredWebTestClient.applicationContextSetup(context);\\n    }\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"// generated by plugin\\npublic class BooksTest extends BaseProducerTest {\\n\\n  @Test\\n  public void validate_post_book_without_title() throws Exception {\\n    // given:\\n    WebTestClientRequestSpecification request = given()\\n        .header(\\\"Content-Type\\\", \\\"application/json\\\")\\n        .body(\\\"{\\\\\\\"title\\\\\\\":null,\\\\\\\"description\\\\\\\":\\\\\\\"the book without title\\\\\\\"}\\\");\\n\\n    // when:\\n    WebTestClientResponse response = given().spec(request)\\n        .post(\\\"/books\\\");\\n\\n    // then:\\n    assertThat(response.statusCode()).isEqualTo(400);\\n  }\\n\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Generated Stub\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-json\"\n  }, \"{\\n  \\\"id\\\": \\\"0694af37-d0c4-4357-b1c9-936dbc773cc0\\\",\\n  \\\"request\\\": {\\n    \\\"url\\\": \\\"/books\\\",\\n    \\\"method\\\": \\\"POST\\\",\\n    \\\"headers\\\": {\\n      \\\"Content-Type\\\": {\\n        \\\"equalTo\\\": \\\"application/json\\\"\\n      }\\n    },\\n    \\\"bodyPatterns\\\": [\\n      {\\n        \\\"matchesJsonPath\\\": \\\"$[?(@.['title'] == null)]\\\"\\n      }\\n    ]\\n  },\\n  \\\"response\\\": {\\n    \\\"status\\\": 400,\\n    \\\"transformers\\\": [\\\"response-template\\\", \\\"spring-cloud-contract\\\"]\\n  },\\n  \\\"uuid\\\": \\\"0694af37-d0c4-4357-b1c9-936dbc773cc0\\\"\\n}\\n\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"uses wiremock in the background\"))), mdx(\"hr\", null), mdx(\"h1\", null, \"Consumer-Side\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Book API Client\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"@Component\\npublic class BookApiClient {\\n\\n  private final WebClient client;\\n\\n  public BookApiClient(WebClient client) {\\n    this.client = client;\\n  }\\n\\n  public Mono<BookResponse> createBook(PostBookRequest request) {\\n    return client.post().uri(\\\"/books\\\")\\n                 .contentType(APPLICATION_JSON)\\n                 .bodyValue(request)\\n                 .retrieve()\\n                 .bodyToMono(BookResponse.class);\\n  }\\n\\n}\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Integration Test\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<!-- pom.xml -->\\n\\n<dependency>\\n  <groupId>org.springframework.cloud</groupId>\\n  <artifactId>spring-cloud-starter-contract-stub-runner</artifactId>\\n  <scope>test</scope>\\n</dependency>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"@SpringBootTest(webEnvironment = NONE, properties = {\\n        \\\"stubrunner-port=${stubrunner.runningstubs.producer.port}\\\",\\n        \\\"web.client.base-url=http://localhost:${stubrunner-port:8081}\\\"\\n})\\n@AutoConfigureStubRunner(\\n        stubsMode = LOCAL,\\n        ids = \\\"com.example:producer:0.0.1-SNAPSHOT:stubs\\\"\\n)\\nclass BookApiClientTest {\\n\\n  @Autowired private BookApiClient client;\\n\\n  @Test\\n  void createBookWithNullTitleShouldReturnBadRequest() {\\n    var bookRequest = new PostBookRequest(null, \\\"description\\\");\\n    StepVerifier.create(client.createBook(bookRequest))\\n                .verifyError(BadRequest.class);\\n  }\\n\\n}\\n\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"LOCAL -> checking for stubs in local maven repository\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CLASSPATH -> checking for stubs in classpath\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"REMOTE -> checking for stubs in a remote repository\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\\"ivy\\\" notation (\", \"[groupId]\", \":artifactId:\", \"[version]\", \":\", \"[classifier][:port]\", \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"when no port is specified, a random port is assigned, accessable through\\nproperty\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Usings stubs for local development\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-xml\"\n  }, \"<!-- pom.xml -->\\n\\n<plugin>\\n  <groupId>org.springframework.cloud</groupId>\\n  <artifactId>spring-cloud-contract-maven-plugin</artifactId>\\n  <version>3.0.2</version>\\n  <extensions>true</extensions>\\n  <configuration>\\n    <contractsMode>LOCAL</contractsMode>\\n    <stubs>com.example:producer:0.0.1-SNAPSHOT:stubs:8080</stubs>\\n  </configuration>\\n</plugin>\\n\\n<!-- Usage: mvn spring-cloud-contract:run -Dspring.cloud.contract.verifier.skip=false -->\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-yaml\"\n  }, \"# docker-compose.yml\\n\\nversion: \\\"3.8\\\"\\n\\nservices:\\n  producer-api-stub:\\n    image: springcloud/spring-cloud-contract-stub-runner:3.0.2\\n    environment:\\n      STUBRUNNER_IDS: \\\"com.example:producer:0.0.1-SNAPSHOT:stubs:8080\\\"\\n      STUBRUNNER_STUBS_MODE: LOCAL\\n    ports:\\n      - \\\"8080:8080\\\"\\n    volumes:\\n      - ~/.m2:/root/.m2\\n\")), mdx(\"hr\", null), mdx(\"h1\", null, \"Thanks!\"), mdx(\"h2\", null, \"Questions?\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://cloud.spring.io/spring-cloud-contract/reference/html/index.html\"\n  }, \"https://cloud.spring.io/spring-cloud-contract/reference/html/index.html\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://cloud-samples.spring.io/spring-cloud-contract-samples/tutorials/contracts_on_the_producer_side.html\"\n  }, \"https://cloud-samples.spring.io/spring-cloud-contract-samples/tutorials/contracts_on_the_producer_side.html\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.infoq.com/articles/contract-testing-spring-cloud-contract/\"\n  }, \"https://www.infoq.com/articles/contract-testing-spring-cloud-contract/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/FrederikS/spring-cloud-contract-samples\"\n  }, \"https://github.com/FrederikS/spring-cloud-contract-samples\"))));\n}\n;\nMDXContent.isMDXComponent = true;","title":"Spring Cloud Contract"}},"pageContext":{"matchPath":"/spring-cloud-contract/*","id":"967ee8f0-ddf6-5900-bb68-5957b0b44c7b","slug":"/slides/spring-cloud-contract","title":"Spring Cloud Contract"}},"staticQueryHashes":[]}