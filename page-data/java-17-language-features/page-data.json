{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/java-17-language-features","matchPath":"/java-17-language-features/*","result":{"data":{"deck":{"id":"67c6c6a2-96bb-569a-b988-5de29f786577","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Notes = makeShortcode(\"Notes\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Java 17\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"since 11\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"language features only\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Collectors::teeing (12)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"compose to downstream collectors\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"final Stream<Map<String, Object>> items = Stream.of(\\n    Map.of(\\\"name\\\", \\\"item-1\\\", \\\"price\\\", 19.99),\\n    Map.of(\\\"name\\\", \\\"item-2\\\", \\\"price\\\", 9.99)\\n);\\n\\nfinal Map<String, Object> cart = items.collect(Collectors.teeing(\\n    Collectors.counting(),\\n    Collectors.mapping(\\n            item -> BigDecimal.valueOf((Double) item.get(\\\"price\\\")),\\n            Collectors.reducing(BigDecimal.ZERO, BigDecimal::add)\\n    ),\\n    (amount, total) -> Map.of(\\\"amount\\\", amount, \\\"total\\\", total)\\n));\\n\\nSystem.out.println(cart);\\n// {amount=2, total=29.98}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/slides/java-17-language-features/10\"\n  }, \"with local records\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Switch expression (14)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"int numLetters;\\nswitch (day) {\\n    case MONDAY:\\n    case FRIDAY:\\n    case SUNDAY:\\n        numLetters = 6;\\n        break;\\n    case TUESDAY:\\n        numLetters = 7;\\n        break;\\n    case THURSDAY:\\n    case SATURDAY:\\n        numLetters = 8;\\n        break;\\n    case WEDNESDAY:\\n        numLetters = 9;\\n        break;\\n    default:\\n        throw new IllegalStateException(\\\"Wat: \\\" + day);\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"int numLetters = switch (day) {\\n    case MONDAY, FRIDAY, SUNDAY -> 6;\\n    case TUESDAY                -> 7;\\n    case THURSDAY, SATURDAY     -> 8;\\n    case WEDNESDAY              -> 9;\\n};\\n\")), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"yield\"), \" to return from blocks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"must\"), \" be exhaustive\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"int numLetters = switch (day) {\\n    case MONDAY, FRIDAY, SUNDAY -> 6;\\n    case TUESDAY                -> 7;\\n    case THURSDAY, SATURDAY     -> 8;\\n    case WEDNESDAY              -> 9;\\n    default -> {\\n        int length = day.toString().length();\\n        yield length;\\n    }\\n};\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://openjdk.java.net/jeps/361\"\n  }, \"https://openjdk.java.net/jeps/361\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Text blocks (15)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"multi-line text blocks without escaping\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"language can be injected in intellij (e.g. JSON)\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"String json = \\\"\\\"\\\"\\n    {\\n      \\\"name\\\": \\\"Alice\\\",\\n      \\\"email\\\": \\\"alice@bayes.gg\\\",\\n      \\\"address\\\": {\\n        \\\"city\\\": \\\"Berlin\\\",\\n        \\\"street\\\": \\\"Street of Berlin 13\\\",\\n        \\\"zip\\\": \\\"11013\\\"\\n      }\\n    }\\n    \\\"\\\"\\\";\\n\")), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"no\"), \" interpolation support : (\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"String name = \\\"Alice\\\";\\nString city = \\\"Berlin\\\";\\n\\nString json = \\\"\\\"\\\"\\n    {\\n      \\\"name\\\": \\\"%s\\\",\\n      \\\"email\\\": \\\"alice@bayes.gg\\\",\\n      \\\"address\\\": {\\n        \\\"city\\\": \\\"%s\\\",\\n        \\\"street\\\": \\\"Street of Berlin 13\\\",\\n        \\\"zip\\\": \\\"11013\\\"\\n      }\\n    }\\n    \\\"\\\"\\\".formatted(name, city);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://openjdk.java.net/jeps/378\"\n  }, \"https://openjdk.java.net/jeps/378\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Records (16)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"transparent carriers for immutable data\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"class Point {\\n    private final int x;\\n    private final int y;\\n\\n    Point(int x, int y) {\\n        this.x = x;\\n        this.y = y;\\n    }\\n\\n    int x() { return x; }\\n    int y() { return y; }\\n\\n    public boolean equals(Object o) {\\n        if (!(o instanceof Point)) return false;\\n        Point other = (Point) o;\\n        return other.x == x && other.y == y;\\n    }\\n\\n    public int hashCode() {\\n        return Objects.hash(x, y);\\n    }\\n\\n    public String toString() {\\n        return String.format(\\\"Point[x=%d, y=%d]\\\", x, y);\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"record Point(int x, int y) { }\\n\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"Goals\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Devise an object-oriented construct that expresses a simple aggregation of values.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Help developers to focus on modeling immutable data rather than extensible behavior.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automatically implement data-driven methods such as equals and accessors.\"))), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"compact canonical constructor\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"record Range(int lo, int hi) {\\n    Range {\\n        if (lo > hi)  // referring here to the implicit constructor parameters\\n            throw new IllegalArgumentException();\\n    }\\n}\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Restrictions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A record class declaration does not have an extends clause\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A record class is implicitly final, and cannot be abstract\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The fields derived from the record components are final\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A record class cannot explicitly declare instance fields, and cannot contain instance initializers\")), mdx(\"hr\", null), mdx(\"h3\", null, \"A record class...\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can be generic\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can declare static methods, fields, and initializers\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can declare instance methods\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can implement interfaces\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"can declare nested types\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"may be decorated with annotations\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Local records\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/slides/java-17-language-features/1\"\n  }, \"teeing sample\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"public static void main(String[] args) {\\n    record Item(String name, BigDecimal price) {}\\n    final Stream<Item> items = Stream.of(\\n            new Item(\\\"item-1\\\", BigDecimal.valueOf(19.99)),\\n            new Item(\\\"item-2\\\", BigDecimal.valueOf(9.99))\\n    );\\n\\n    record Cart(long amount, BigDecimal total) {}\\n    final Cart cart = items.collect(Collectors.teeing(\\n            Collectors.counting(),\\n            Collectors.mapping(Item::price, reducing(ZERO, BigDecimal::add)),\\n            Cart::new\\n    ));\\n\\n    // Cart[amount=2, total=29.98]\\n    System.out.println(cart);\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://openjdk.java.net/jeps/395\"\n  }, \"https://openjdk.java.net/jeps/395\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Pattern Matching for instanceof (16)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"if (obj instanceof String) {\\n    String s = (String) obj;    // grr...\\n    ...\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"if (obj instanceof String s && s.length() > 5) {\\n    flag = s.contains(\\\"jdk\\\");\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://openjdk.java.net/jeps/394\"\n  }, \"https://openjdk.java.net/jeps/394\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Stream::toList (16)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"// before java 16\\nStream.of(\\\"foo\\\", \\\"bar\\\").collect(Collectors.toList());\\n\\n// since java 16\\nStream.of(\\\"foo\\\", \\\"bar\\\").toList();\\n\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Sealed Classes (17)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A sealed class or interface restricts which other classes or interfaces may extend/implement them\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"public sealed interface Shape permits Circle, Rectangle, Square {\\n\\n    record Circle(float r) implements Shape {}\\n    record Rectangle(float a, float b) implements Shape {}\\n    record Square(float a) implements Shape {}\\n\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"better control over possible implementations of a supertype\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"compiler can better reason about exhaustiveness\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Exhaustiveness\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"public double areaOf(Shape shape) {\\n    if (shape instanceof Circle circle) {\\n        return Math.PI * circle.r() * circle.r();\\n    } else if (shape instanceof Rectangle rectangle) {\\n        return rectangle.a() * rectangle.b();\\n    } else if (shape instanceof Square square) {\\n        return square.a() * square.a();\\n    } else {\\n        throw new IllegalStateException();\\n    }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"// not there yet in java 17 still in preview\\npublic double areaOf(Shape shape) {\\n    return switch (shape) {\\n        case Circle circle -> Math.PI * circle.r() * circle.r();\\n        case Rectangle rectangle -> rectangle.a() * rectangle.b();\\n        case Square square -> square.a() * square.a();\\n        // no default needed\\n    };\\n}\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"No deconstruction patterns yet\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"// is planned for the future\\npublic double areaOf(Shape shape) {\\n    return switch (shape) {\\n        case Circle(float r) -> Math.PI * r * r;\\n        case Rectangle(float a, float b) -> a * b;\\n        case Square(float a) -> a * a;\\n    };\\n}\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"Another example\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"interface Future<V> {\\n    ...\\n    V get(long timeout, TimeUnit unit)\\n        throws InterruptedException, ExecutionException, TimeoutException;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"try {\\n    V v = future.get();\\n    // handle normal completion\\n}\\ncatch (TimeoutException e) {\\n    // handle timeout\\n}\\ncatch (InterruptedException e) {\\n    // handle cancelation\\n}\\ncatch (ExecutionException e) {\\n    Throwable cause = e.getCause();\\n    // handle task failure\\n}\\n\")), mdx(\"hr\", null), mdx(\"h3\", null, \"With sealed classes\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"interface Future<V> {\\n    AsyncReturn<V> get();\\n}\\n\\nsealed interface AsyncReturn<V> {\\n    record Success<V>(V result) implements AsyncReturn<V> { }\\n    record Failure<V>(Throwable cause) implements AsyncReturn<V> { }\\n    record Timeout<V>() implements AsyncReturn<V> { }\\n    record Interrupted<V>() implements AsyncReturn<V> { }\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"// with future version\\nswitch (future.get()) {\\n    case Success success -> System.out.println(\\\"success\\\");\\n    case Failure failure -> System.out.println(\\\"failure\\\");\\n    case Timeout timeout -> System.out.println(\\\"timeout\\\");\\n    case Interrupted interrupted -> System.out.println(\\\"interrupted\\\");\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://openjdk.java.net/jeps/409\"\n  }, \"https://openjdk.java.net/jeps/409\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://slides.nipafx.dev/java-after-eight/index.html\"\n  }, \"https://slides.nipafx.dev/java-after-eight/index.html\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://docs.oracle.com/en/java/javase/15/text-blocks/index.html\"\n  }, \"https://docs.oracle.com/en/java/javase/15/text-blocks/index.html\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.infoq.com/articles/java-sealed-classes/\"\n  }, \"https://www.infoq.com/articles/java-sealed-classes/\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://cr.openjdk.java.net/~briangoetz/amber/pattern-match.html\"\n  }, \"https://cr.openjdk.java.net/~briangoetz/amber/pattern-match.html\"))));\n}\n;\nMDXContent.isMDXComponent = true;","title":"Java 17"}},"pageContext":{"matchPath":"/java-17-language-features/*","id":"67c6c6a2-96bb-569a-b988-5de29f786577","slug":"/slides/java-17-language-features","title":"Java 17"}},"staticQueryHashes":[]}